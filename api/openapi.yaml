openapi: 3.0.3
info:
  title: Warehouse API
  description: Warehouse API with auth
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
tags:
  - name: Authorization
paths:
  /auth/sign-up:
    post:
      tags:
        - Authorization
      summary: Register
      operationId: SignUp
      requestBody:
        $ref: '#/components/requestBodies/SignUpInput'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          $ref: '#/components/responses/GenericError'
        '422':
          $ref: '#/components/responses/GenericError'
      x-codegen-request-body-name: body
  /auth/login:
    post:
      tags:
        - Authorization
      summary: Login
      description: Sign in to the app. Returns cookies, access_token, refresh_token, logged_in
      operationId: SignIn
      requestBody:
        $ref: '#/components/requestBodies/SignInInput'
      responses:
        '200':
          $ref: '#/components/responses/LoginRes'
        '400':
          $ref: '#/components/responses/GenericError'
        '422':
          $ref: '#/components/responses/GenericError'
      x-codegen-request-body-name: body
  /auth/logout:
    get:
      tags:
        - Authorization
      security:
        - access_token: [ ]
        - Authorization: [ ]
      summary: Logout
      description: Destroys all cookies, finishes local session, saved on the server
      operationId: Logout
      responses:
        '201':
          $ref: '#/components/responses/EmptyOkResponse'
        '400':
          $ref: '#/components/responses/GenericError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/GenericError'
  /auth/refresh:
    get:
      tags:
        - Authorization
      security:
        - refresh_token: [ ]
      summary: Refresh token
      description: Sets new access_token and logged_in(HTTPOnly:false). refresh_token stays the same until expires
      operationId: RefreshToken
      responses:
        '201':
          $ref: '#/components/responses/AccessToken'
        '400':
          $ref: '#/components/responses/GenericError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/GenericError'
  /auth/me:
    get:
      tags:
        - Authorization
      security:
        - access_token: [ ]
        - Authorization: [ ]
      summary: Get me
      description: Get info about currently authorized user
      operationId: GetMe
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/GenericError'
components:
  parameters:
    idsArrParam:
      in: query
      name: id
      required: true
      schema:
        type: integer
        minimum: 1
        default: 0
        example: 10
      description: Array of ids
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 1
        default: 0
        example: 10
      description: The number of items to skip before starting to collect the result set
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        default: 20
      description: The numbers of items to return.
  securitySchemes:
    access_token:
      description: |
        You have to have access token in access token cookie to authorize request
      type: apiKey
      name: access_token
      in: cookie
    refresh_token:
      description: |
        Refresh token is used to gain new access token
      type: apiKey
      name: refresh_token
      in: cookie
    Authorization:
      type: apiKey
      name: Authorization
      in: header
      description: |
        Prefix the value with "Authorization" to indicate the custom authorization type
  responses:
    ManyProducts:
      description: Products array
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              pagination:
                $ref: '#/components/schemas/Pagination'
    OneProduct:
      description: One product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    User:
      description: User
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/components/schemas/User'
    LoginRes:
      description: User, access token, refresh_token, logged_in
      headers:
        Set-Cookie:
          schema:
            type: string
            example: access_token httponly, refresh_token httponly, logged_in boolean
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
              user:
                $ref: '#/components/schemas/User'
    AccessToken:
      description: Access token
      headers:
        Set-Cookie:
          schema:
            type: string
            example: access_token httponly, logged_in boolean
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                example: secureToken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: no access token
    GenericError:
      description: String error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: something went wrong
    EmptyOkResponse:
      description: No content
      content:
        text/html:
          schema:
            type: string
  requestBodies:
    CreateOrderInput:
      required: true
      description: Create order
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderInput'
    CreateAddressInput:
      required: true
      description: Create address
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressInput'
    CreateShelfInput:
      required: true
      description: Create shelf
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ShelfInput'
    CreateProductInput:
      required: true
      description: Create product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductInput'
    SignUpInput:
      required: true
      description: Register a user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignUpInput'
    SignInInput:
      required: true
      description: Login
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignInInput'
  schemas:
    Pagination:
      required:
        - total
        - limit
        - offset
      type: object
      properties:
        total:
          type: integer
          example: 25
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0
    Product:
      required:
        - id
        - name
        - serial
        - price
        - model
        - picture_url
        - created_at
        - updated_at
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Phone
        serial:
          type: string
          example:  34ko34j
        price:
          type: integer
          example: 250
        model:
          type: string
          nullable: true
          example: iPhone
        created_at:
          type: string
          format: date-time
          example: 01.02.2024
        updated_at:
          type: string
          format: date-time
          example: 01.02.2024
    AssemblyProduct:
      required:
        - product_id
        - product_name
        - serial
        - order_id
        - quantity_shelf
        - order_quantity
      type: object
      properties:
        product_id:
          type: integer
          example: 1
        product_name:
          type: string
          example: Phone
        serial:
          type: string
          example: 34ko34j
        order_id:
          type: integer
          example: 1
        quantity_shelf:
          type: integer
          example: 2
        order_quantity:
          type: string
          format: date-time
          example: 01.02.2024
    AssemblyInfo:
      required:
        - shelf_name
        - products
      type: object
      properties:
        shelf_name:
          type: string
          example: ShelfOne
        products:
          type: array
          items:
            $ref: '#/components/schemas/AssemblyProduct'
    ProductInput:
      required:
        - name
        - serial
        - price
        - picture_url
      type: object
      properties:
        name:
          type: string
          example: Speakers
        serial:
          type: string
          example: n9876bhg
        price:
          type: integer
          example: 500
        model:
          type: string
          nullable: true
          example: Adam
        picture_url:
          type: string
          example: https://unsplash.com/photos/a-desk-with-a-monitor-keyboard-and-speakers-S0BhaaEQBZE
    ProductWithQty:
      required:
        - product
        - quantity
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          example: 2
    ProductIdQty:
      required:
        - product_id
        - quantity
      type: object
      properties:
        product_id:
          type: integer
          example: 1
        quantity:
          example: 3
    Shelf:
      required:
        - id
        - name
        - created_at
        - updated_at
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Phone
        created_at:
          type: string
          format: date-time
          example: 01.02.2024
        updated_at:
          type: string
          format: date-time
          example: 01.02.2024
    ShelfInput:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: Speakers
    Address:
      required:
        - id
        - city
        - street
        - house
        - floor
        - entrance
        - additional_info
        - created_at
        - updated_at
      type: object
      properties:
        id:
          type: integer
          example: 1
        city:
          type: string
          example: Phone
        street:
          type: string
          example: Phone
        house:
          type: string
          example: Phone
        floor:
          type: string
          example: Phone
        entrance:
          type: string
          example: Phone
        additional_info:
          type: string
          example: Phone
        created_at:
          type: string
          format: date-time
          example: 01.02.2024
        updated_at:
          type: string
          format: date-time
          example: 01.02.2024
    AddressInput:
      required:
        - city
        - street
        - house
      type: object
      properties:
        name:
          type: string
          example: Speakers
        city:
          type: string
          example: Moscow
        street:
          type: string
          example: Kantemirovskaya
        house:
          type: string
          example: 20
        floor:
          type: integer
          example: 7
        entrance:
          type: integer
          example: 2
        additional_info:
          type: string
          example: Call when you arrive
    Order:
      required:
        - id
        - address
        - payment
        - products
        - created_at
        - updated_at
      type: object
      properties:
        id:
          type: integer
          example: 1
        address:
          $ref: '#/components/schemas/Address'
        payment:
          type: string
          example: Cash
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductWithQty'
        created_at:
          type: string
          format: date-time
          example: 01.02.2024
        updated_at:
          type: string
          format: date-time
          example: 01.02.2024
    OrderInput:
      required:
        - address_id
        - payment
        - products
      type: object
      properties:
        address_id:
          type: string
          example: Speakers
        payment:
          type: string
          example: Moscow
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductIdQty'
    User:
      required:
        - id
        - name
        - email
        - updated_at
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John
        email:
          type: string
          example: john@mail.com
        updated_at:
          type: string
          format: date-time
          example: 02.03.2020
    SignUpInput:
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: Me
        email:
          type: string
          example: me@mail.com
        password:
          type: string
          minLength: 8
          example: kkkkkkkk
    SignInInput:
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: me@mail.com
        password:
          type: string
          minLength: 8
          example: kkkkkkkk